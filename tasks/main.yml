---
######################
## OS Bootstrapping ##
######################
#################################
# Preconfigure OSes for Ansible #
#################################
# Ping host, and upon Ansible ping failure, do the below steps, i.e. set a bool flag. Otherwise skip
- name: test Ansible ssh connection
  ping:
  register: ansible_first_ping
  changed_when: false
  failed_when: false
  tags:
    - preconfigure-ansible

- name: preconfigure systems for Ansible if ping fails
  block:

    - name: manually check OS distribution
      raw: "cat /etc/issue | awk '{ print $1 }' | xargs echo -n"
      register: manual_os_distribution
      failed_when: false
      changed_when: false
      tags:
        - preconfigure-ansible

    - name: manually check OS version
      raw: "cat /etc/issue | awk '{ print $3 }' | xargs echo -n"
      register: manual_os_version
      failed_when: false
      changed_when: false
      tags:
        - preconfigure-ansible

    - name: manually detect OS family
      raw: uname -s
      register: is_osx
      failed_when: false
      changed_when: false
      tags:
        - preconfigure-ansible
        - osx-prep

    - name: determine if homebrew is installed
      stat:
        path: /usr/local/bin/brew
      register: homebrew_present
      when:
        - "is_osx.stdout.find('Darwin') != -1"
      tags:
        - preconfigure-ansible
        - osx-prep

    - name: install python and deps for ansible modules for Fedora
      raw: sudo dnf install -y {{ dnf_packages_to_preinstall | join(' ') }}
      when: manual_os_distribution.stdout.find('Fedora') != -1
      become: yes
      tags:
        - preconfigure-ansible
        - fedora-prep

    - name: install python and deps for ansible modules Debian systems
      raw: sudo apt install -y {{ apt_packages_to_preinstall | join(' ') }}
      when:
        - manual_os_distribution.stdout.find('Debian') != -1 or
            manual_os_distribution.stdout.find('Ubuntu') != -1
      become: yes
      tags:
        - preconfigure-ansible
        - apt-prep

    - name: install homebrew for ansible modules
      raw: /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
      when:
        - is_osx.stdout.find('Darwin') != -1
        - homebrew_present is defined
        - not homebrew_present.stat.exists | bool
      tags:
        - preconfigure-ansible
        - osx-prep
  when:
    - ansible_first_ping.ping != "pong"

- name: test ping again
  ping:
  tags:
    - preconfigure-ansible

###################
# Gather OS Facts #
###################
- name: get facts manually
  setup:
  tags:
    - dotfiles
    - ssh
    - pip

- name: gather os specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
    - "{{ ansible_distribution }}.yml"
    - "{{ ansible_os_family }}.yml"
    - default.yml
  tags:
    - vars
    - pip

- name: gather other os specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ os_vars_dir }}/{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
    - "{{ os_vars_dir }}/{{ ansible_distribution }}.yml"
    - "{{ os_vars_dir }}/{{ ansible_os_family }}.yml"
    - default.yml
  when:
    - not os_vars_dir == "vars"
  tags:
    - packages-to-install
    - vars
    - dl

#######################
# Install OS Packages #
#######################
- name: apt update for debian systems
  apt:
    name: "{{ item }}"
    update_cache: true
    state: present
  when:
    - ansible_os_family == "Debian"
  with_items:
    - "{{ packages_to_preinstall | default([]) }}"
  tags:
    - packages

- name: remove unneccessary packages
  package:
    name: "{{ item }}"
    state: absent
    use: "{{ package_mgr_to_use }}"
  with_items:
    - "{{ packages_to_remove | default([]) }}"
    - "{{ extra_packages_to_remove | default([]) }}"
  tags:
    - packages
    - remove-packages

- name: pre-install software
  package:
    name: "{{ item }}"
    state: present
    use: "{{ package_mgr_to_use }}"
  with_items:
    - "{{ packages_to_preinstall | default([]) }}"
    - "{{ extra_packages_to_preinstall | default([]) }}"
  tags:
    - packages
    - packages-to-preinstall

- name: install software
  package:
    name: "{{ item }}"
    state: present
    use: "{{ package_mgr_to_use }}"
  with_items:
    - "{{ packages_to_install | default([]) }}"
    - "{{ extra_packages_to_install | default([]) }}"
  tags:
    - packages
    - packages-to-install

########################
# Install pip Packages #
########################
- name: install pip packages
  pip:
    name: "{{ item }}"
    state: present
    executable: "{{ pip_executable }}"
  with_items:
    - "{{ pip_packages_to_install }}"
  tags:
    - pip

######################################
# Install Custom/Downloaded Packages #
######################################
- name: manually download packages and files
  get_url:
    url: "{{ item.url }}"
    dest: '{{ item.path }}'
    mode: 0644
    validate_certs: no
  with_items:
    - "{{ dl_packages_to_install }}"
  when:
    - dl_packages_locally | bool
    - item.path is defined
  tags:
    - pkgs
    - dl

- name: install downloaded yum pkgs
  yum:
    name: "{{ item.url }}"
    state: present
  with_items:
    - "{{ dl_packages_to_install }}"
  when:
    - dl_packages_locally | bool
    - ansible_distribution == 'CentOS'
    - item.path is not defined
    - "item.binary_type == 'rpm'"
  tags:
    - pkgs
    - dl
    - install-pkgs

- name: install downloaded dnf pkgs
  dnf:
    name: "{{ item.url }}"
    state: present
  with_items:
    - "{{ dl_packages_to_install }}"
  when:
    - dl_packages_locally | bool
    - "ansible_distribution == 'Fedora'"
    - item.path is not defined
    - "item.binary_type == 'rpm'"
  tags:
    - pkgs
    - dl
    - install-pkgs

- name: install deb packages from web url
  apt:
    deb: "{{ item.url }}"
    state: present
  with_items:
    - "{{ dl_packages_to_install }}"
  when:
    - dl_packages_locally | bool
    - ansible_os_family == "Debian"
    - item.path is not defined
    - "item.binary_type == 'deb'"
  tags:
    - pkgs
    - dl
    - install-pkgs

- name: install downloaded apt pkgs
  apt:
    deb: "{{ item.path }}"
    state: present
  with_items:
    - "{{ dl_packages_to_install }}"
  when:
    - dl_packages_locally | bool
    - ansible_os_family == "Debian"
    - item.path is defined
    - "item.binary_type == 'deb'"
  tags:
    - pkgs
    - dl
    - install-pkgs

####################
# Install Archives #
####################
- name: unarchive any downloaded files
  unarchive:
    src: "{{ item.path }}"
    dest: "{{ item.extracted_path }}"
    remote_src: "{{ item.remote_src | default(true) }}"
  with_items:
    - "{{ dl_packages_to_install }}"
  when:
    - item.extracted_path is defined
    - "item.binary_type == 'tar'"
  tags:
    - unarchive

# - name: install unarchived files
#   shell: "{{ item.shell }}"
#   with_items:
#     - "{{ dl_packages_to_install }}"
#   when:
#     - item.shell is defined
#     - "item.binary_type == 'tar'"
#   tags:
#     - unarchive
#     - shell

#####################
# Install Ruby Gems #
#####################
- name: install ruby gems
  gem:
    name: "{{ item.gem_name }}"
    version: "{{ item.version }}"
    state: "{{ item.state | default('present') }}"
    executable: "{{ gem_executable | default(omit) }}"
    env_shebang: true
  with_items:
    - "{{ gems_to_install }}"
  tags:
    - gems

##############################
# Run any erroneous commands #
##############################
# - name: run any erroneous shell commands
#   shell: "{{ item.shell }}"
#   with_items:
#     - "{{ shell_commands }}"
